library(tidyverse)
library(tidyr)
library(dplyr)
df=as.data.frame(df)
df=df%>%
pivot_longer(cols=c(MSE_10,MSE_10),names_to="stat",values_to="value")
clear
install.packages("tidyr")
install.packages("tidyr")
library(ggplot2)
library(tidyr)
library(dplyr)
install.packages("tidyr")
df=cbind(degree.vec,MSE_10,Var_10,sq_bias_10,MSE_16,Var_16,sq_bias_16)
df=as.data.frame(df)
df=df%>%
pivot_longer(cols=c(MSE_10,MSE_10),names_to="stat",values_to="value")
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
df=cbind(degree.vec,MSE_10,Var_10,sq_bias_10,MSE_16,Var_16,sq_bias_16)
df=as.data.frame(df)
df=df%>%
pivot_longer(cols=c(MSE_10,MSE_10),names_to="stat",values_to="value")
library(ggplot2)
library(tidyverse)
library(tidyr)
library(dplyr)
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5)
abline(h=0,lty=2)
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5)
abline(h=0,lty=2)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
points(degree.vec,Var_10,col="blue")
points(degree.vec,sq_bias_10,col="green")
axis(1:5, -100:1000)
?axis
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000))
abline(h=0,lty=2)
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000))
abline(h=0,lty=2)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
points(degree.vec,Var_10,col="blue")
points(degree.vec,sq_bias_10,col="green")
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000))
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000))
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topleft",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="value")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topleft",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="value")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("right",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="value")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("outright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
?legend
legend("bottomright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="value")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("bottomright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="value")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
?plot
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,700),xlab="Degree",ylab="value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
# Solution goes here -----------
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,700),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
Var_10
sq_bias_10
MSE_10
y.test.mat[1,]
mat.pred1
(y.test.mat[1,]-mat.pred1)
# Solution goes here -----------
y.test.mat[c(1,1,1,1,1),1:10]
MSE_10=apply((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2,1,mean)
MSE_10
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
MSE_10=apply((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2,1,mean)
MSE_10
Var_10=apply(mat.pred1,1,var)
Var_10
sq_bias_10=(apply(mat.pred1,1,mean)-true.f(10))^2
sq_bias_10
MSE_16=apply((y.test.mat[c(2,2,2,2,2),]-mat.pred2)^2,1,mean)
MSE_16
Var_16=apply(mat.pred2,1,var)
Var_16
sq_bias_16=(apply(mat.pred2,1,mean)-true.f(16))^2
sq_bias_16
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,700),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,500),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,500),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
MSE_10=apply((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2,1,mean)
MSE_10
Var_10=apply(mat.pred1,1,var)
Var_10
sq_bias_10=(apply(mat.pred1,1,mean)-true.f(10))^2
sq_bias_10
MSE_16=apply((y.test.mat[c(2,2,2,2,2),]-mat.pred2)^2,1,mean)
MSE_16
Var_16=apply(mat.pred2,1,var)
Var_16
sq_bias_16=(apply(mat.pred2,1,mean)-true.f(16))^2
sq_bias_16
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,600),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,800),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,600),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,600),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
MSE_10-Var_10-sq_bias_10
MSE_16-Var_16-sq_bias_16
MSE_10
MSE1=1/1000*rowSums((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2)
MSE1
MSE_10=apply((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2,1,mean)
MSE_10
MSE1=1/1000*rowSums((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2)
MSE1
VAR1=1/1000*rowSums((mat.pred.1-1/1000*rowsums(mat.pred.1)))
VAR1
mat.pred.1
VAR1=1/1000*rowSums((mat.pred1-1/1000*rowsums(mat.pred1)))
VAR1
VAR1=1/1000*rowSums((mat.pred1-1/1000*rowSums(mat.pred1)))
VAR1
Var_10
Var_10=apply(mat.pred1,1,var)
Var_10
VAR1=1/1000*rowSums((mat.pred1-1/1000*rowSums(mat.pred1)))
VAR1
MSE_10-VAR1-sq_bias_10
BIAS1=(true.f(10)-1/1000*rowSums(mat.pred1))
BIAS1
sq_bias_10
MSE_10-VAR1-BIAS1
plot(degree.vec,MSE1,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,VAR1,col="blue",pch=20,cex=1.5)
points(degree.vec,BIAS1,col="green",pch=20,cex=1.5)
lines(degree.vec,VAR1,col="blue")
lines(degree.vec,BIAS1,col="green")
lines(degree.vec,MSE1,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
# Simulate data
set.seed(1)
poly.predict <- function(degree.vec,
data,
x.test) {
# Vectorize predict.test.case()
pred <- sapply(degree.vec,
predict.test.case,
data=data,
x.test=x.test)
# Name rows and columns
#rownames(pred)  <- paste("TestCase",1:length(x.test),sep="")
#colnames(pred)  <- paste("D",degree.vec,sep="")
# Return
return(pred)
}
x.test=c(10,16)
degree.vec=c(1,2,3,4,5)
mat.pred1=matrix(0,5,1000)
mat.pred2=matrix(0,5,1000)
y.test.mat=matrix(0,2,1000)
for(i in 1:1000){
sim.data.train=sim.training(x.test=x.test)
pred1=poly.predict(degree.vec,data=sim.data.train$data.train,x.test=10)
pred2=poly.predict(degree.vec,data=sim.data.train$data.train,x.test=16)
mat.pred1[,i]=pred1
mat.pred2[,i]=pred2
y.test.mat[,i]=sim.data.train$y.test
}
MSE_10=apply((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2,1,mean)
MSE_10
MSE1=1/1000*rowSums((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2)
MSE1
Var_10=apply(mat.pred1,1,var)
Var_10
VAR1=1/1000*rowSums((mat.pred1-1/1000*rowSums(mat.pred1)))
VAR1
sq_bias_10=(apply(mat.pred1,1,mean)-true.f(10))^2
sq_bias_10
BIAS1=(true.f(10)-1/1000*rowSums(mat.pred1))
BIAS1
MSE_16=apply((y.test.mat[c(2,2,2,2,2),]-mat.pred2)^2,1,mean)
MSE_16
Var_16=apply(mat.pred2,1,var)
Var_16
sq_bias_16=(apply(mat.pred2,1,mean)-true.f(16))^2
sq_bias_16
MSE_10-VAR1-BIAS1
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE1,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,VAR1,col="blue",pch=20,cex=1.5)
points(degree.vec,BIAS1,col="green",pch=20,cex=1.5)
lines(degree.vec,VAR1,col="blue")
lines(degree.vec,BIAS1,col="green")
lines(degree.vec,MSE1,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,600),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
grid()
plot(degree.vec,MSE1,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,VAR1,col="blue",pch=20,cex=1.5)
points(degree.vec,BIAS1,col="green",pch=20,cex=1.5)
lines(degree.vec,VAR1,col="blue")
lines(degree.vec,BIAS1,col="green")
lines(degree.vec,MSE1,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,600),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
Var_10=apply(mat.pred1,1,var)
Var_10
VAR1=1/1000*rowSums((mat.pred1-1/1000*rowSums(mat.pred1))^2)
VAR1
Var_10=apply(mat.pred1,1,var)
Var_10
VAR1=1/1000*rowSums((mat.pred1-1/1000*rowSums(mat.pred1))^2)
VAR1
sq_bias_10=(apply(mat.pred1,1,mean)-true.f(10))^2
sq_bias_10
BIAS1=(true.f(10)-1/1000*rowSums(mat.pred1))
BIAS1
sq_bias_10=(apply(mat.pred1,1,mean)-true.f(10))^2
sq_bias_10
BIAS1=(true.f(10)-1/1000*rowSums(mat.pred1))^2
BIAS1
# Solution goes here -----------
MSE_10=apply((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2,1,mean)
MSE_10
Var_10=apply(mat.pred1,1,var)
Var_10
sq_bias_10=(apply(mat.pred1,1,mean)-true.f(10))^2
sq_bias_10
MSE_16=apply((y.test.mat[c(2,2,2,2,2),]-mat.pred2)^2,1,mean)
MSE_16
Var_16=apply(mat.pred2,1,var)
Var_16
sq_bias_16=(apply(mat.pred2,1,mean)-true.f(16))^2
sq_bias_16
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
grid()
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,600),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
grid()
# Solution goes here -----------
poly.predict <- function(degree.vec,
data,
x.test) {
# Vectorize predict.test.case()
pred <- sapply(degree.vec,
predict.test.case,
data=data,
x.test=x.test)
# Name rows and columns
#rownames(pred)  <- paste("TestCase",1:length(x.test),sep="")
#colnames(pred)  <- paste("D",degree.vec,sep="")
# Return
return(pred)
}
x.test=c(10,16)
degree.vec=c(1,2,3,4,5)
mat.pred1=matrix(0,5,1000)
mat.pred2=matrix(0,5,1000)
y.test.mat=matrix(0,2,1000)
for(i in 1:1000){
sim.data.train=sim.training(x.test=x.test)
pred1=poly.predict(degree.vec,data=sim.data.train$data.train,x.test=10)
pred2=poly.predict(degree.vec,data=sim.data.train$data.train,x.test=16)
mat.pred1[,i]=pred1
mat.pred2[,i]=pred2
y.test.mat[,i]=sim.data.train$y.test
}
dim(mat.pred1)
dim(mat.pred2)
dim(y.test.mat)
MSE_10=apply((y.test.mat[c(1,1,1,1,1),]-mat.pred1)^2,1,mean)
MSE_10
Var_10=apply(mat.pred1,1,var)
Var_10
sq_bias_10=(apply(mat.pred1,1,mean)-true.f(10))^2
sq_bias_10
MSE_16=apply((y.test.mat[c(2,2,2,2,2),]-mat.pred2)^2,1,mean)
MSE_16
Var_16=apply(mat.pred2,1,var)
Var_16
sq_bias_16=(apply(mat.pred2,1,mean)-true.f(16))^2
sq_bias_16
plot(degree.vec,MSE_10,col="red",pch=20,cex=1.5,ylim=c(-100,1000),xlab="Degree",ylab="Value",main="x.test=10")
abline(h=0,lty=2)
points(degree.vec,Var_10,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_10,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_10,col="blue")
lines(degree.vec,sq_bias_10,col="green")
lines(degree.vec,MSE_10,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
grid()
plot(degree.vec,MSE_16,col="red",pch=20,cex=1.5,ylim=c(-100,600),xlab="Degree",ylab="Value",main="x.test=16")
abline(h=0,lty=2)
points(degree.vec,Var_16,col="blue",pch=20,cex=1.5)
points(degree.vec,sq_bias_16,col="green",pch=20,cex=1.5)
lines(degree.vec,Var_16,col="blue")
lines(degree.vec,sq_bias_16,col="green")
lines(degree.vec,MSE_16,col="red")
legend("topright",legend=c("MSE","Variance","Bias"),fill=c("red","blue","green"))
grid()
View(dt_lyrics)
View(dt_lyrics)
load("C:/Users/YWJ97/Desktop/ADS/Spring2020-Project1-Morgan-Yang/output/processed_lyrics.RData")
View(dt_lyrics)
