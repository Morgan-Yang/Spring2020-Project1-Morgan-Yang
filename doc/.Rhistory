#rep_emotions=as.matrix(get_nrc_sentiment(df_cheeky$stemmedwords))
#save(rep_emotions, file="../output/rep_emo.RData")
load("../output/rep_emo.RData")
colSums(rep_emotions)
#all_emotions=as.matrix(get_nrc_sentiment(df$stemmedwords))
#save(all_emotions, file="../output/all_emo.RData")
load("../output/all_emo.RData")
colSums(all_emotions)
#load("../output/processed_lyrics.RData")
#postprocessed_df=dt_lyrics%>%
#  mutate(postprocess_count=word_count(stemmedwords))%>%
#  mutate(split_word=strsplit(stemmedwords," "),
#         distinct_count=sapply(split_word,n_distinct))%>%
#  mutate(keyword_repeat=1-distinct_count/postprocess_count)
#save(postprocessed_df, file="../output/postprocessed_df.RData")
load("../output/postprocessed_df.RData")
postprocessed_df
postprocessed_df
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# load packages
library("rvest")
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
# You may need to run
# sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# in order to load qdap
library("qdap")
library("sentimentr")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library("topicmodels")
library("tidyr")
library("wordcloud")
library("DT")
library(data.table)
library(tidytext)
library(tidytext)
library(tidyverse)
#save(postprocessed_df, file="../output/postprocessed_df.RData")
load("../output/postprocessed_df.RData")
df1=postprocessed_df%>%
filter(postprocess_count>40)%>%
arrange(desc(keyword_repeat))
head(df1,100)
# Step 3: Rate of meaningless word and stop word aganinst pre-processed total word ---- Meaningless Rate
Having a bunch of meaningless word, pronoun or connective word can decrease the information density of a song. Though people don't expect to actually learn something through listening to music, songs like this still give people a tedious vibe.
So in this section, we start from counting distinct words and total words in the pre-processed file (processed_lyrics.Rdata without removing the stop words). Then by $$meaningless\,rate=1-\frac{distinct\,word}{total\,word}$$, the outcome shows the percentage of redundant words in the lyrics and will be used to indicate the meaninglessness of song lyrics.The larger the meaningless rate, the lyrics has less information density.
```{r,message=FALSE, warning=FALSE}
#preprocessed_df=preprocessed_df%>%
#  mutate(preprocessed_word=stemmed$text)%>%
#  mutate(preprocess_count=word_count(preprocessed_word))
#save(preprocessed_df, file="../output/preprocessed_df.RData")
load("../output/preprocessed_df.RData")
df=postprocessed_df%>%
left_join(preprocessed_df,c("song"="song","year"="year","artist"="artist","genre"="genre","lyrics"="lyrics"))%>%
mutate(meaningless_rate=1-postprocess_count/preprocess_count)%>%
select(song,year,artist,genre,lyrics,stemmedwords,keyword_repeat,meaningless_rate)
df_cheeky=df%>%
filter(keyword_repeat>0.85 | meaningless_rate>0.85)
df_cheeky
library(ggplot2)
df=postprocessed_df%>%
left_join(preprocessed_df,c("song"="song","year"="year","artist"="artist","genre"="genre","lyrics"="lyrics"))%>%
mutate(meaningless_rate=1-postprocess_count/preprocess_count)%>%
select(song,year,artist,genre,lyrics,stemmedwords,keyword_repeat,meaningless_rate)
df=postprocessed_df%>%
left_join(preprocessed_df,c("song"="song","year"="year","artist"="artist","genre"="genre","lyrics"="lyrics"))%>%
mutate(meaningless_rate=1-postprocess_count/preprocess_count)%>%
select(song,year,artist,genre,lyrics,stemmedwords,keyword_repeat,meaningless_rate)
df_cheeky=df%>%
filter(keyword_repeat>0.85 | meaningless_rate>0.85)
df_cheeky
library(ggplot2)
ggplot(data=df)+
geom_bar(mapping = aes(x=year))+
xlim(1980,2020)+
theme_light()
ggplot(data=df)+
geom_bar(mapping = aes(x=year))+
xlim(1980,2020)+
theme_light()
ggplot(data=df_cheeky)+
geom_bar(mapping = aes(x=year))+
xlim(1980,2020)+
theme_light()
df_year=df%>%
count(year,name="total")
rep_year=df_cheeky%>%
count(year,name="rep_total")
year_rep_rate=rep_year%>%
left_join(df_year,by="year")%>%
mutate(rep_rate=rep_total/total)
year_rep_rate
ggplot(data=year_rep_rate)+
geom_bar(mapping = aes(x=year,y=rep_rate),stat="identity")+
xlim(1980,2016)+
labs(title="Are song lyrics getting more repetitive or meaningless nowadays?")+
theme_light()
df_year=df%>%
count(year,name="total")
rep_year=df_cheeky%>%
count(year,name="rep_total")
year_rep_rate=rep_year%>%
left_join(df_year,by="year")%>%
mutate(rep_rate=rep_total/total)
year_rep_rate
ggplot(data=year_rep_rate)+
geom_bar(mapping = aes(x=year,y=rep_rate),stat="identity")+
xlim(1980,2016)+
labs(title="Are song lyrics getting more repetitive or meaningless nowadays?")+
theme_light()
ggplot(data=df_cheeky)+
geom_bar(mapping = aes(x=genre))+
labs(title="Which genre tends to be repetitive and meaningless?")+
theme_light()
ggplot(data=df_cheeky)+
geom_bar(mapping = aes(x=genre))+
labs(title="Which genre tends to be repetitive and meaningless?")+
theme_light()
top_10_cheeky=df_cheeky%>%
count(artist)%>%
arrange(desc(n))%>%
mutate(artist=ordered(artist))%>%
top_n(10)
top_10_cheeky
ggplot(data=top_10_cheeky)+
geom_bar(aes(x=artist,y=n,fill=artist),stat="identity", width=1, color="white")+
coord_polar("y", start=0)+
labs(title="Who is the artist with the least sophiscated lyrics?")+
theme_light()
df_wordcloud=df_cheeky%>%
mutate(split_word=strsplit(stemmedwords," "))%>%
mutate(distinct_word=sapply(split_word,unique))
cheeky_word=as.data.frame(table(unlist(df_wordcloud$distinct_word)))
cheeky_word=as_tibble(cheeky_word)
cheeky_word%>%
arrange(desc(Freq))
library(viridis)
wordcloud(unlist(df_wordcloud$distinct_word),max.words =100,colors=palette(viridis(1000)))
For comparison, we give the wordcloud for all songs to see if there is any difference.
```{r, message=FALSE, warning=FALSE}
wordcloud(unlist(df_wordcloud$distinct_word),max.words =100,colors=palette(viridis(1000)))
all_wordcloud=postprocessed_df%>%
mutate(split_word=strsplit(stemmedwords," "))%>%
mutate(distinct_word=sapply(split_word,unique))
all_wordcloud=postprocessed_df%>%
mutate(split_word=strsplit(stemmedwords," "))%>%
mutate(distinct_word=sapply(split_word,unique))
all_word=as.data.frame(table(unlist(all_wordcloud$distinct_word)))
all_word=as.data.frame(table(unlist(all_wordcloud$distinct_word)))
all_word=as.data.frame(table(unlist(all_wordcloud$distinct_word)))
all_word=as_tibble(all_word)
all_word%>%
arrange(desc(Freq))
wordcloud(unlist(all_wordcloud$distinct_word),max.words =100,colors=palette(viridis(1000)))
save(all_wordcloud, file="../output/all_wordcloud.RData")
#all_wordcloud=postprocessed_df%>%
#  mutate(split_word=strsplit(stemmedwords," "))%>%
#  mutate(distinct_word=sapply(split_word,unique))
#all_word=as.data.frame(table(unlist(all_wordcloud$distinct_word)))
#all_word=as_tibble(all_word)
#save(all_wordcloud, file="../output/all_wordcloud.RData")
load("../output/all_wordcloud.RData")
all_word%>%
arrange(desc(Freq))
wordcloud(unlist(all_wordcloud$distinct_word),max.words =100,colors=palette(viridis(1000)))
all_wordcloud%>%
arrange(desc(Freq))
#all_wordcloud=postprocessed_df%>%
#  mutate(split_word=strsplit(stemmedwords," "))%>%
#  mutate(distinct_word=sapply(split_word,unique))
#all_word=as.data.frame(table(unlist(all_wordcloud$distinct_word)))
#all_word=as_tibble(all_word)
#save(all_wordcloud, file="../output/all_wordcloud.RData")
load("../output/all_wordcloud.RData")
#all_wordcloud=postprocessed_df%>%
#  mutate(split_word=strsplit(stemmedwords," "))%>%
#  mutate(distinct_word=sapply(split_word,unique))
#all_word=as.data.frame(table(unlist(all_wordcloud$distinct_word)))
#all_word=as_tibble(all_word)
#save(all_wordcloud, file="../output/all_wordcloud.RData")
load("../output/all_wordcloud.RData")
all_wordcloud
wordcloud(unlist(all_wordcloud$distinct_word),max.words =100,colors=palette(viridis(1000)))
all_wordcloud
#load("../output/processed_lyrics.RData")
#postprocessed_df=dt_lyrics%>%
#  mutate(postprocess_count=word_count(stemmedwords))%>%
#  mutate(split_word=strsplit(stemmedwords," "),
#         distinct_count=sapply(split_word,n_distinct))%>%
#  mutate(keyword_repeat=1-distinct_count/postprocess_count)
#save(postprocessed_df, file="../output/postprocessed_df.RData")
load("../output/postprocessed_df.RData")
all_wordcloud=postprocessed_df%>%
mutate(split_word=strsplit(stemmedwords," "))%>%
mutate(distinct_word=sapply(split_word,unique))
all_word=as.data.frame(table(unlist(all_wordcloud$distinct_word)))
all_word=as_tibble(all_word)
all_word
#all_wordcloud=postprocessed_df%>%
#  mutate(split_word=strsplit(stemmedwords," "))%>%
#  mutate(distinct_word=sapply(split_word,unique))
all_word=as.data.frame(table(unlist(all_wordcloud$distinct_word)))
all_word=as_tibble(all_word)
all_word%>%
arrange(desc(Freq))
wordcloud(unlist(all_wordcloud$distinct_word),max.words =100,colors=palette(viridis(1000)))
wordcloud2(unlist(all_wordcloud$distinct_word),max.words =100,colors=palette(viridis(1000)))
wordcloud2(unlist(all_wordcloud$distinct_word),max.words =100,colors=palette(viridis(1000)))
#rep_emotions=as.matrix(get_nrc_sentiment(df_cheeky$stemmedwords))
#save(rep_emotions, file="../output/rep_emo.RData")
load("../output/rep_emo.RData")
#all_emotions=as.matrix(get_nrc_sentiment(df$stemmedwords))
#save(all_emotions, file="../output/all_emo.RData")
load("../output/all_emo.RData")
rbind(rep_emotions,all_emotions)
rbind(colSums(rep_emotions),colSUms(all_emotions))
colSums(all_emotions)
rbind(colSums(rep_emotions),colSums(all_emotions))
tb=rbind(colSums(rep_emotions),colSums(all_emotions))
tb
tb[,11]=rowsum(tb)
tb[,11]=rowSums(tb)
rowSums(tb)
prop.table(tb)
tb
?proptable
?prop.table
prop.table(tb,1)
rowSums(tb)
tb=prop.table(tb,1)
rowSums(tb)
tb
rownames(tb)
rownames(tb)=c("target","all")
tb
install.packages("tinytex")
library(tinytex)
---
title: "Repetitive and Meaningless Song Lyrics"
author: "Wenjun Yang UNI:wy2347"
output:
html_document:
df_print: paged
---
<img src="../figs/title.jpg"/>
